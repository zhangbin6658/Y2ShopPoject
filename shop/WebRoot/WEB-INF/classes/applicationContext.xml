<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
        xmlns:aop="http://www.springframework.org/schema/aop"  
        xmlns:p="http://www.springframework.org/schema/p"  
        xmlns:tx="http://www.springframework.org/schema/tx"  
        xmlns:context="http://www.springframework.org/schema/context"  
        xsi:schemaLocation="   
            http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans.xsd   
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop.xsd   
            http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx.xsd 
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context.xsd">  
            
   
    <!--context:property-placeholder：读取数据库配置文件 -->
    <context:property-placeholder location="classpath:database.properties"/>
    
    <!--获取数据源(使用dbcp连接池) -->  
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" 
    		destroy-method="close" scope="singleton">
    		<property name="driverClassName" value="${driver}" />  
			<property name="url" value="${url}" />  
			<property name="username" value="${user}" />  
			<property name="password" value="${password}" />
    </bean>
    
   
   	
   	<!-- 配置mybitas SqlSessionFactoryBean-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="dataSource" ref="dataSource"/>
    	<property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>
    
     <!--事务管理 -->
   	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   		<property name="dataSource" ref="dataSource"/>
   	</bean> 
    
   	<!-- AOP 事务处理 开始 基于注解的方式-->    
	<aop:aspectj-autoproxy />
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">  
	    <tx:attributes>  
	       <tx:method name="find*"  propagation="REQUIRED" rollback-for="Exception"  read-only="true"/>
	       <tx:method name="search*"  propagation="REQUIRED" rollback-for="Exception"  read-only="true"/>
	       <tx:method name="save*"  propagation="REQUIRED" rollback-for="Exception"  />
	       <tx:method name="add*"  propagation="REQUIRED" rollback-for="Exception"  />
	       <tx:method name="delete*"  propagation="REQUIRED" rollback-for="Exception"  />
	       <tx:method name="update*"  propagation="REQUIRED" rollback-for="Exception"  />
	       <tx:method name="*"  propagation="REQUIRED" rollback-for="Exception"  />
	       
	       
	       
	       
	       
	    </tx:attributes>  
	</tx:advice> 
	
	<!-- proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。
	如果proxy-target-class 属性值被设置为true，那么基于类的代理（CGLIB代理）将起作用（这时需要cglib库）。
	如果proxy-target-class属值被设置为false或者这个属性被省略，那么标准的JDK 基于接口的代理将起作用。 -->
	<aop:config  proxy-target-class="true">
		<aop:pointcut expression="execution(* com.mast.shop.service.*.*(..))" id="transService"/>
		<aop:advisor pointcut-ref="transService" advice-ref="txAdvice" />
	</aop:config> 
	
	<!-- AOP 事务处理 结束 -->
	
	<!-- Spring与Mybatis整合后数据库访问层Dao注入配置 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
         <property name="basePackage" value="com.mast.shop.dao"></property>  
    </bean>
     <!--Spring 的context:component-scan扫描器：扫描包内Spring注解完成依赖注入-->       
    <context:component-scan base-package="com.mast.shop.service"></context:component-scan>
    
    <!-- <import resource="classpath:applicationContext-shiro.xml"/> -->
</beans>